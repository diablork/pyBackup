#!/usr/bin/env python

# Author: FB
# Date: July 2013

import sys, tarfile, os, time

if os.path.isfile('backup.conf'):
	CONF = 'backup.conf'
else:
	dir = os.path.dirname(sys.argv[0])
	CONF = str(dir) + '/' + 'backup.conf'

# Parse the config file. We are mainly
# interested to drop comments and blank
# lines.

def parseConfig(loc=CONF):
	try:
		file = open(loc, 'r')
		data = file.readlines()
		file.close()
	except:
		print "Unable to open config file: %s\nPlease retry with a valid config file." % loc
		sys.exit(1)
	conf = {}
	for line in data:
		if line.startswith('#'):
			# comments
			pass
		elif line == '\n':
			# blank line
			pass
		elif '=' in line:
			# this is one of the params
			# we can have a single value
			# or multiple values separated by ,
			if ',' in line:
				line = line.replace('\n', '')
				param = line.split('=')[0]
				val = line.split('=')[1:]
				val = val[0].split(',')
				values = []
				for i in val:
					i = i.strip()
					values.append(i)
				conf[param] = values
			else:
				line = line.strip()
				line = line.replace('\n', '')
				param = line.split('=')[0]
				value = line.split('=')[1]
				conf[param] = value
		else:
			pass
	return conf

def archiveFiles(dest, name, source):
	if not '.tar.gz' in name:
		name = str(name) + '.tar.gz'
	dest = str(dest) + '/' + str(name)
	if not os.path.isfile(dest):
		tarFile = tarfile.open(dest, 'w:gz')
		if isinstance(source, list):
			for path in source:
				print "Adding %s to %s" % (path, dest),
				init = time.time()
				files = listDir(path)
				for i in files:
					tarFile.add(i)
				end = time.time() - init
				print "=> Finished in %.2f" % end
		else: 
			print "Adding %s to %s" % (source, dest)
			init = time.time()
			files = listDir(source)
			for i in files:
				tarFile.add(i)
			tarFile.add(source)
			end = time.time() - init
			print "=> Finished in %.2f" % end,
		tarFile.close()
	else:
		print "[ERROR] %s already exists, please retry." % dest


# On Windows, if we try to tar system files which the user does not
# have access to, tar will die. So we need to parse the dirs ourselves.

def listDir(dir):
	files = []		
	try:
		listing = os.listdir(dir)
	except WindowsError:
		print "Skipping %s" % dir
	for d in listing:
                path = dir + os.sep + d
                # don't follow links :)
                if os.path.isdir(path) and not os.path.islink(path):
                        files.append(path)
                        listDir(path)
                else:
                        files.append(path)
	return files


def fileName():
	name = 'pyBackup' + str(time.strftime('%d%m%Y%H%M%S', time.localtime()))
	return name

def checkDir(path):
	if os.path.exists(path):
		if os.path.isfile(path):
			print "%s already exists, but it's a file. Please specify a different path" % path
			sys.exit(1)
		elif os.path.isdir(path):
			return 0
	else:
		os.mkdir(path)
		return 0
		

def main():
	params = parseConfig()
	dest = params['destination']
	checkDir(dest)
	source = params['source']
	name = fileName()
	archiveFiles(dest, name, source)

if __name__ == '__main__':
	main()
